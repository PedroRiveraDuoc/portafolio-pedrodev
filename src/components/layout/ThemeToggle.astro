---
import SunIcon from "@/components/icons/Sun.astro"
import MoonIcon from "@/components/icons/Moon.astro"
import SystemIcon from "@/components/icons/System.astro"

const THEMES = ["Light", "Dark", "System"]
---

<div class="relative ml-1 mr-1">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  :global(.theme-toggle-icon) {
    @apply scale-0;
  }

  :global(.dark .theme-toggle-icon#dark) {
    @apply scale-100;
  }

  :global(:not(.dark) .theme-toggle-icon#light) {
    @apply scale-100;
  }

  :global([data-theme="system"] .theme-toggle-icon#system) {
    @apply scale-100;
  }
</style>

<script>
  // Espera a que el DOM esté completamente cargado
  document.addEventListener('astro:page-load', () => {
    const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');
    const themesMenu = document.getElementById('themes-menu');
    const themeToggleBtn = document.getElementById('theme-toggle-btn');

    // Obtiene la preferencia del tema
    const getThemePreference = () => {
      if (typeof localStorage !== 'undefined') {
        return localStorage.getItem('theme') ?? 'system';
      }
      return matchMedia.matches ? 'dark' : 'light';
    };

    // Actualiza el tema
    const updateTheme = () => {
      const themePreference = getThemePreference();
      document.documentElement.setAttribute('data-theme', themePreference);
      
      const isDark =
        themePreference === 'dark' ||
        (themePreference === 'system' && matchMedia.matches);

      document.documentElement.classList.toggle('dark', isDark);
    };

    // Inicializa el tema
    updateTheme();

    // Event listeners
    matchMedia.addEventListener('change', updateTheme);

    document.addEventListener('click', () => {
      themesMenu?.classList.remove('open');
    });

    themeToggleBtn?.addEventListener('click', (e) => {
      e.stopPropagation();
      themesMenu?.classList.toggle('open');
    });

    document.querySelectorAll('.themes-menu-option').forEach((element) => {
      element.addEventListener('click', (e) => {
        const theme = (e.target as HTMLElement).innerText.toLowerCase().trim();
        localStorage.setItem('theme', theme);
        updateTheme();
      });
    });
  });

  // Asegura que el tema se mantenga después de la navegación
  document.addEventListener('astro:after-swap', () => {
    const themePreference = localStorage.getItem('theme') ?? 'system';
    document.documentElement.setAttribute('data-theme', themePreference);
    
    const isDark =
      themePreference === 'dark' ||
      (themePreference === 'system' && window.matchMedia('(prefers-color-scheme: dark)').matches);

    document.documentElement.classList.toggle('dark', isDark);
  });
</script> 